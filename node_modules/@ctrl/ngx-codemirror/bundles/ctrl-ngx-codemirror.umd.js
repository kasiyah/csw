(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/forms')) :
    typeof define === 'function' && define.amd ? define('@ctrl/ngx-codemirror', ['exports', '@angular/core', '@angular/forms'], factory) :
    (global = global || self, factory((global.ctrl = global.ctrl || {}, global.ctrl['ngx-codemirror'] = {}), global.ng.core, global.ng.forms));
}(this, (function (exports, core, forms) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    }

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __exportStar(m, exports) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }

    function __values(o) {
        var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
        if (m) return m.call(o);
        return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    };

    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }

    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    }

    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }

    function __asyncValues(o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
    }

    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
        return cooked;
    };

    function __importStar(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        result.default = mod;
        return result;
    }

    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }

    function normalizeLineEndings(str) {
        if (!str) {
            return str;
        }
        return str.replace(/\r\n|\r/g, '\n');
    }
    /* tslint:disable */
    var CodeMirror;
    /* tslint:enable */
    var CodemirrorComponent = /** @class */ (function () {
        function CodemirrorComponent(_differs, _ngZone) {
            this._differs = _differs;
            this._ngZone = _ngZone;
            /* class applied to the created textarea */
            this.className = '';
            /* name applied to the created textarea */
            this.name = 'codemirror';
            /* autofocus setting applied to the created textarea */
            this.autoFocus = false;
            /* preserve previous scroll position after updating value */
            this.preserveScrollPosition = false;
            /* called when the text cursor is moved */
            this.cursorActivity = new core.EventEmitter();
            /* called when the editor is focused or loses focus */
            this.focusChange = new core.EventEmitter();
            /* called when the editor is scrolled */
            this.scroll = new core.EventEmitter();
            /* called when file(s) are dropped */
            this.drop = new core.EventEmitter();
            this.value = '';
            this.disabled = false;
            this.isFocused = false;
            /** Implemented as part of ControlValueAccessor. */
            this.onChange = function (_) { };
            /** Implemented as part of ControlValueAccessor. */
            this.onTouched = function () { };
        }
        CodemirrorComponent_1 = CodemirrorComponent;
        Object.defineProperty(CodemirrorComponent.prototype, "options", {
            /**
             * set options for codemirror
             * @link http://codemirror.net/doc/manual.html#config
             */
            set: function (value) {
                this._options = value;
                if (!this._differ && value) {
                    this._differ = this._differs.find(value).create();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CodemirrorComponent.prototype, "codeMirrorGlobal", {
            get: function () {
                if (this._codeMirror) {
                    return this._codeMirror;
                }
                this._codeMirror = CodeMirror ? CodeMirror : require('codemirror');
                return this._codeMirror;
            },
            enumerable: true,
            configurable: true
        });
        CodemirrorComponent.prototype.ngAfterViewInit = function () {
            var _this = this;
            if (!this.ref) {
                return;
            }
            // in order to allow for universal rendering, we import Codemirror runtime with `require` to prevent node errors
            this._ngZone.runOutsideAngular(function () {
                _this.codeMirror = _this.codeMirrorGlobal.fromTextArea(_this.ref.nativeElement, _this._options);
                _this.codeMirror.on('cursorActivity', function (cm) {
                    return _this._ngZone.run(function () { return _this.cursorActive(cm); });
                });
                _this.codeMirror.on('scroll', _this.scrollChanged.bind(_this));
                _this.codeMirror.on('blur', function () {
                    return _this._ngZone.run(function () { return _this.focusChanged(false); });
                });
                _this.codeMirror.on('focus', function () {
                    return _this._ngZone.run(function () { return _this.focusChanged(true); });
                });
                _this.codeMirror.on('change', function (cm, change) {
                    return _this._ngZone.run(function () { return _this.codemirrorValueChanged(cm, change); });
                });
                _this.codeMirror.on('drop', function (cm, e) {
                    _this._ngZone.run(function () { return _this.dropFiles(cm, e); });
                });
                _this.codeMirror.setValue(_this.value);
            });
        };
        CodemirrorComponent.prototype.ngDoCheck = function () {
            var _this = this;
            if (!this._differ) {
                return;
            }
            // check options have not changed
            var changes = this._differ.diff(this._options);
            if (changes) {
                changes.forEachChangedItem(function (option) {
                    return _this.setOptionIfChanged(option.key, option.currentValue);
                });
                changes.forEachAddedItem(function (option) {
                    return _this.setOptionIfChanged(option.key, option.currentValue);
                });
                changes.forEachRemovedItem(function (option) {
                    return _this.setOptionIfChanged(option.key, option.currentValue);
                });
            }
        };
        CodemirrorComponent.prototype.ngOnDestroy = function () {
            // is there a lighter-weight way to remove the cm instance?
            if (this.codeMirror) {
                this.codeMirror.toTextArea();
            }
        };
        CodemirrorComponent.prototype.codemirrorValueChanged = function (cm, change) {
            if (change.origin !== 'setValue') {
                this.value = cm.getValue();
                this.onChange(this.value);
            }
        };
        CodemirrorComponent.prototype.setOptionIfChanged = function (optionName, newValue) {
            if (!this.codeMirror) {
                return;
            }
            // cast to any to handle strictly typed option names
            // could possibly import settings strings available in the future
            this.codeMirror.setOption(optionName, newValue);
        };
        CodemirrorComponent.prototype.focusChanged = function (focused) {
            this.onTouched();
            this.isFocused = focused;
            this.focusChange.emit(focused);
        };
        CodemirrorComponent.prototype.scrollChanged = function (cm) {
            this.scroll.emit(cm.getScrollInfo());
        };
        CodemirrorComponent.prototype.cursorActive = function (cm) {
            this.cursorActivity.emit(cm);
        };
        CodemirrorComponent.prototype.dropFiles = function (cm, e) {
            this.drop.emit([cm, e]);
        };
        /** Implemented as part of ControlValueAccessor. */
        CodemirrorComponent.prototype.writeValue = function (value) {
            if (value === null || value === undefined) {
                return;
            }
            if (!this.codeMirror) {
                this.value = value;
                return;
            }
            var cur = this.codeMirror.getValue();
            if (value !== cur &&
                normalizeLineEndings(cur) !== normalizeLineEndings(value)) {
                this.value = value;
                if (this.preserveScrollPosition) {
                    var prevScrollPosition = this.codeMirror.getScrollInfo();
                    this.codeMirror.setValue(this.value);
                    this.codeMirror.scrollTo(prevScrollPosition.left, prevScrollPosition.top);
                }
                else {
                    this.codeMirror.setValue(this.value);
                }
            }
        };
        /** Implemented as part of ControlValueAccessor. */
        CodemirrorComponent.prototype.registerOnChange = function (fn) {
            this.onChange = fn;
        };
        /** Implemented as part of ControlValueAccessor. */
        CodemirrorComponent.prototype.registerOnTouched = function (fn) {
            this.onTouched = fn;
        };
        /** Implemented as part of ControlValueAccessor. */
        CodemirrorComponent.prototype.setDisabledState = function (isDisabled) {
            this.disabled = isDisabled;
            this.setOptionIfChanged('readOnly', this.disabled);
        };
        var CodemirrorComponent_1;
        CodemirrorComponent.ctorParameters = function () { return [
            { type: core.KeyValueDiffers },
            { type: core.NgZone }
        ]; };
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], CodemirrorComponent.prototype, "className", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], CodemirrorComponent.prototype, "name", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], CodemirrorComponent.prototype, "autoFocus", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object),
            __metadata("design:paramtypes", [Object])
        ], CodemirrorComponent.prototype, "options", null);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], CodemirrorComponent.prototype, "preserveScrollPosition", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", Object)
        ], CodemirrorComponent.prototype, "cursorActivity", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", Object)
        ], CodemirrorComponent.prototype, "focusChange", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", Object)
        ], CodemirrorComponent.prototype, "scroll", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", Object)
        ], CodemirrorComponent.prototype, "drop", void 0);
        __decorate([
            core.ViewChild('ref', { static: true }),
            __metadata("design:type", core.ElementRef)
        ], CodemirrorComponent.prototype, "ref", void 0);
        CodemirrorComponent = CodemirrorComponent_1 = __decorate([
            core.Component({
                selector: 'ngx-codemirror',
                template: "\n    <textarea\n      [name]=\"name\"\n      class=\"ngx-codemirror {{ className }}\"\n      [class.ngx-codemirror--focused]=\"isFocused\"\n      autocomplete=\"off\"\n      [autofocus]=\"autoFocus\"\n      #ref\n    >\n    </textarea>\n  ",
                providers: [
                    {
                        provide: forms.NG_VALUE_ACCESSOR,
                        useExisting: core.forwardRef(function () { return CodemirrorComponent_1; }),
                        multi: true,
                    },
                ],
                preserveWhitespaces: false,
                changeDetection: core.ChangeDetectionStrategy.OnPush
            }),
            __metadata("design:paramtypes", [core.KeyValueDiffers, core.NgZone])
        ], CodemirrorComponent);
        return CodemirrorComponent;
    }());

    var CodemirrorModule = /** @class */ (function () {
        function CodemirrorModule() {
        }
        CodemirrorModule = __decorate([
            core.NgModule({
                exports: [CodemirrorComponent],
                declarations: [CodemirrorComponent],
            })
        ], CodemirrorModule);
        return CodemirrorModule;
    }());

    exports.CodemirrorComponent = CodemirrorComponent;
    exports.CodemirrorModule = CodemirrorModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ctrl-ngx-codemirror.umd.js.map
