import { AfterViewInit, DoCheck, ElementRef, EventEmitter, KeyValueDiffers, NgZone, OnDestroy } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { Editor, EditorChangeLinkedList, EditorFromTextArea, ScrollInfo } from 'codemirror';
export declare class CodemirrorComponent implements AfterViewInit, OnDestroy, ControlValueAccessor, DoCheck {
    private _differs;
    private _ngZone;
    className: string;
    name: string;
    autoFocus: boolean;
    /**
     * set options for codemirror
     * @link http://codemirror.net/doc/manual.html#config
     */
    options: {
        [key: string]: any;
    };
    preserveScrollPosition: boolean;
    cursorActivity: EventEmitter<Editor>;
    focusChange: EventEmitter<boolean>;
    scroll: EventEmitter<ScrollInfo>;
    drop: EventEmitter<[Editor, DragEvent]>;
    ref: ElementRef;
    value: string;
    disabled: boolean;
    isFocused: boolean;
    codeMirror: EditorFromTextArea;
    /**
     * either global variable or required library
     */
    private _codeMirror;
    private _differ;
    private _options;
    constructor(_differs: KeyValueDiffers, _ngZone: NgZone);
    readonly codeMirrorGlobal: any;
    ngAfterViewInit(): void;
    ngDoCheck(): void;
    ngOnDestroy(): void;
    codemirrorValueChanged(cm: Editor, change: EditorChangeLinkedList): void;
    setOptionIfChanged(optionName: string, newValue: any): void;
    focusChanged(focused: boolean): void;
    scrollChanged(cm: Editor): void;
    cursorActive(cm: Editor): void;
    dropFiles(cm: Editor, e: DragEvent): void;
    /** Implemented as part of ControlValueAccessor. */
    writeValue(value: string): void;
    /** Implemented as part of ControlValueAccessor. */
    registerOnChange(fn: (value: string) => void): void;
    /** Implemented as part of ControlValueAccessor. */
    registerOnTouched(fn: () => void): void;
    /** Implemented as part of ControlValueAccessor. */
    setDisabledState(isDisabled: boolean): void;
    /** Implemented as part of ControlValueAccessor. */
    private onChange;
    /** Implemented as part of ControlValueAccessor. */
    private onTouched;
}
